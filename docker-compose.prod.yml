version: '3.8'

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    image: synapseflow-api:latest
    env_file: .env.production
    environment:
      - SYNAPSEFLOW_ENV=production
      - LICENSE_ENFORCE=1
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8081:8081"
    volumes:
      - ./synapseflow_data:/app/synapseflow_data
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  twilio-webhook:
    build:
      context: ./docker/twilio-webhook
      dockerfile: Dockerfile
    image: synapseflow-twilio:latest
    env_file: .env.production
    environment:
      - SYNAPSEFLOW_ENV=production
      - LICENSE_ENFORCE=1
    ports:
      - "5005:5005"
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  messenger-webhook:
    build:
      context: ./docker/messenger-webhook
      dockerfile: Dockerfile
    image: synapseflow-messenger:latest
    env_file: .env.production
    environment:
      - SYNAPSEFLOW_ENV=production
      - LICENSE_ENFORCE=1
    ports:
      - "5006:5006"
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - api
      - twilio-webhook
      - messenger-webhook

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  nginx-logs:

networks:
  default:
    driver: bridge